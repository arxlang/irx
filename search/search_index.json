{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IRx","text":"<p>IRx aims to provide a translator to LLVM-IR from ASTx objects.</p> <p>ASTx is a generic project that offers a way to compound in an expressive way an AST. It is not specific for the ArxLang project, although it is main focus is to provide all needed feature for it.</p> <p>IRx uses llvmlite in order to generate LLVM-IR source.</p> <ul> <li>Software License: BSD 3 Clause</li> <li>Documentation: https://irx.arxlang.org.</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate LLVM-IR from ASTx.</li> </ul>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#121-2024-05-02","title":"1.2.1 (2024-05-02)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Update ASTx to v0.12.2 (#15) (3ae5797)</li> </ul>"},{"location":"changelog/#120-2024-04-21","title":"1.2.0 (2024-04-21)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Replace local customized AST implementation for Target and Module by astx classes (#13) (972eba6)</li> </ul>"},{"location":"changelog/#110-2024-03-24","title":"1.1.0 (2024-03-24)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Improve a several things: documentation, tests, CI, and the usage of ASTx (#8) (63393ff)</li> </ul>"},{"location":"changelog/#102-2024-01-19","title":"1.0.2 (2024-01-19)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>docs: fix installation step (#11) (9c07b1e)</li> </ul>"},{"location":"changelog/#101-2024-01-19","title":"1.0.1 (2024-01-19)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix documentation publishing (#10) (3ce6c3d)</li> </ul>"},{"location":"changelog/#100-2024-01-19","title":"1.0.0 (2024-01-19)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix typing issues (#6) (0cd87c6)</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add initial structure and initial translator for LLVM-IR (#1) (1c54eb4)</li> <li>Rename project to IRx (#9) (3a85652)</li> <li>Replace home-made llvm-ir compiler from llvmlite (#7) (daafff3)</li> </ul>"},{"location":"contributing/","title":"Contributing Guideline","text":"<p>In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout, which means that the package code is located at <code>./src/irx</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/arxlang/irx/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>IRx could always use more documentation, whether as part of the official IRx docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/arxlang/irx/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>irx</code> for local development.</p> <ol> <li>Fork the <code>irx</code> repo on GitHub.</li> <li>Clone your fork locally:</li> </ol> <pre><code>$ git clone git@github.com:your_name_here/irx.git\n$ cd irx/\n</code></pre> <ol> <li>Create a new virtual environment and install your local copy into that:</li> </ol> <pre><code># note: you can use mamba or conda or micromamba\n$ mamba env create --file conda/dev.yaml\n$ conda activate irx\n$ poetry install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n# Now you can make your changes locally.\n</code></pre> <ol> <li>When you\u2019re done making changes, check that your changes pass the linter and     the tests:</li> </ol> <pre><code>$ makim tests.linter\n$ makim tests.unittest\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests, you can use something like:</p> <pre><code>$ pytest tests.test_binary_op\n</code></pre> <p>or</p> <pre><code>$ makim tests.unittest --path \"tests/test_binary_op\" --params \"-k mytest_func\"\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>NOTE: Breaking change's commit message prefix should have <code>!</code> before <code>:</code>. Also, ensure to specify <code>feat</code> or <code>fix</code> in the prefix.</p> <p>References:</p> <ul> <li>https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</li> <li>https://www.conventionalcommits.org/en/v1.0.0/</li> </ul> <p>This project uses the <code>squash and merge</code> strategy, so ensure to apply the commit message format to the PR's title.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install IRx, run this command in your terminal:</p> <pre><code>$ pip install pyirx\n</code></pre> <p>This is the preferred method to install IRx, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for IRx can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/arxlang/irx\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/arxlang/irx/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"api/","title":"Index","text":""},{"location":"api/#irx","title":"irx","text":"<p>Top-level package for IRx.</p>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li> irx<ul> <li> builders<ul> <li> base</li> <li> llvmliteir</li> <li> symbol_table</li> </ul> </li> </ul> </li> </ul>"},{"location":"api/builders/","title":"Index","text":""},{"location":"api/builders/#irx.builders","title":"builders","text":"<p>Module for ASTx builders.</p>"},{"location":"api/builders/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"api/builders/base/#irx.builders.base","title":"base","text":"<p>Define the public irx API.</p>"},{"location":"api/builders/base/#irx.builders.base.Builder","title":"Builder","text":"<pre><code>Builder()\n</code></pre> <p>             Bases: <code>ABC</code></p> <p>ASTx Builder.</p> Source code in <code>src/irx/builders/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize Builder object.\"\"\"\n    self.translator = BuilderVisitor()\n    self.tmp_path = \"\"\n    self.output_file = \"\"\n    self.sh_args: Dict[str, Any] = dict(\n        _in=sys.stdin,\n        _out=sys.stdout,\n        _err=sys.stderr,\n        _env=os.environ,\n        # _new_session=True,\n    )\n</code></pre>"},{"location":"api/builders/base/#irx.builders.base.Builder.build","title":"build  <code>abstractmethod</code>","text":"<pre><code>build(expr: AST, output_file: str) -&gt; None\n</code></pre> <p>Transpile ASTx to LLVM-IR and build an executable file.</p> Source code in <code>src/irx/builders/base.py</code> <pre><code>@abstractmethod\ndef build(\n    self,\n    expr: astx.AST,\n    output_file: str,  # noqa: F841, RUF100\n) -&gt; None:\n    \"\"\"Transpile ASTx to LLVM-IR and build an executable file.\"\"\"\n    ...\n</code></pre>"},{"location":"api/builders/base/#irx.builders.base.Builder.module","title":"module","text":"<pre><code>module() -&gt; Module\n</code></pre> <p>Create a new ASTx Module.</p> Source code in <code>src/irx/builders/base.py</code> <pre><code>def module(self) -&gt; astx.Module:\n    \"\"\"Create a new ASTx Module.\"\"\"\n    return astx.Module()\n</code></pre>"},{"location":"api/builders/base/#irx.builders.base.Builder.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the generated executable.</p> Source code in <code>src/irx/builders/base.py</code> <pre><code>@abstractmethod\ndef run(self) -&gt; None:\n    \"\"\"Run the generated executable.\"\"\"\n    ...\n</code></pre>"},{"location":"api/builders/base/#irx.builders.base.Builder.translate","title":"translate","text":"<pre><code>translate(expr: AST) -&gt; str\n</code></pre> <p>Transpile ASTx to LLVM-IR.</p> Source code in <code>src/irx/builders/base.py</code> <pre><code>def translate(self, expr: astx.AST) -&gt; str:\n    \"\"\"Transpile ASTx to LLVM-IR.\"\"\"\n    return self.translator.translate(expr)\n</code></pre>"},{"location":"api/builders/base/#irx.builders.base.BuilderVisitor","title":"BuilderVisitor","text":"<p>Builder translator visitor.</p>"},{"location":"api/builders/base/#irx.builders.base.BuilderVisitor.translate","title":"translate","text":"<pre><code>translate(expr: AST) -&gt; str\n</code></pre> <p>Translate an ASTx expression to string.</p> <p>Example of how it could be implemented:</p> <pre><code>self.visit(expr)\nreturn str(self.result)\n</code></pre> Source code in <code>src/irx/builders/base.py</code> <pre><code>def translate(self, expr: astx.AST) -&gt; str:\n    \"\"\"\n    Translate an ASTx expression to string.\n\n    Example of how it could be implemented:\n\n        self.visit(expr)\n        return str(self.result)\n    \"\"\"\n    raise Exception(\"Not implemented yet.\")\n</code></pre>"},{"location":"api/builders/base/#irx.builders.base.BuilderVisitor.visit","title":"visit","text":"<pre><code>visit(expr: VariableDeclaration) -&gt; None\n</code></pre> <p>Translate an ASTx VariableDeclaration expression.</p> Source code in <code>src/irx/builders/base.py</code> <pre><code>@dispatch  # type: ignore[no-redef]\ndef visit(self, expr: astx.VariableDeclaration) -&gt; None:\n    \"\"\"Translate an ASTx VariableDeclaration expression.\"\"\"\n    raise Exception(\"Not implemented yet.\")\n</code></pre>"},{"location":"api/builders/llvmliteir/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> llvmliteir","text":""},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir","title":"llvmliteir","text":"<p>LLVM-IR builder.</p>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIR","title":"LLVMLiteIR","text":"<pre><code>LLVMLiteIR()\n</code></pre> <p>             Bases: <code>Builder</code></p> <p>LLVM-IR transpiler and compiler.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize LLVMIR.\"\"\"\n    super().__init__()\n    self.translator: LLVMLiteIRVisitor = LLVMLiteIRVisitor()\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIR.build","title":"build","text":"<pre><code>build(expr: AST, output_file: str) -&gt; None\n</code></pre> <p>Transpile the ASTx to LLVM-IR and build it to an executable file.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def build(self, expr: astx.AST, output_file: str) -&gt; None:\n    \"\"\"Transpile the ASTx to LLVM-IR and build it to an executable file.\"\"\"\n    result = self.translate(expr)\n\n    result_mod = llvm.parse_assembly(result)\n    result_object = self.translator.target_machine.emit_object(result_mod)\n\n    with tempfile.NamedTemporaryFile(suffix=\"\", delete=False) as temp_file:\n        self.tmp_path = temp_file.name\n\n    file_path_o = f\"{self.tmp_path}.o\"\n\n    with open(file_path_o, \"wb\") as f:\n        f.write(result_object)\n\n    self.output_file = output_file\n\n    run_command(\n        [\n            \"clang\",\n            file_path_o,\n            \"-o\",\n            self.output_file,\n        ]\n    )\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIR.module","title":"module","text":"<pre><code>module() -&gt; Module\n</code></pre> <p>Create a new ASTx Module.</p> Source code in <code>src/irx/builders/base.py</code> <pre><code>def module(self) -&gt; astx.Module:\n    \"\"\"Create a new ASTx Module.\"\"\"\n    return astx.Module()\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIR.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the generated executable.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the generated executable.\"\"\"\n    sh([self.output_file])\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIR.translate","title":"translate","text":"<pre><code>translate(expr: AST) -&gt; str\n</code></pre> <p>Transpile ASTx to LLVM-IR.</p> Source code in <code>src/irx/builders/base.py</code> <pre><code>def translate(self, expr: astx.AST) -&gt; str:\n    \"\"\"Transpile ASTx to LLVM-IR.\"\"\"\n    return self.translator.translate(expr)\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIRVisitor","title":"LLVMLiteIRVisitor","text":"<pre><code>LLVMLiteIRVisitor()\n</code></pre> <p>             Bases: <code>BuilderVisitor</code></p> <p>LLVM-IR Translator.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize LLVMTranslator object.\"\"\"\n    super().__init__()\n    self.function_protos: dict[str, astx.FunctionPrototype] = {}\n    self.result_stack: list[ir.Value | ir.Function] = []\n\n    self.initialize()\n\n    self.target = llvm.Target.from_default_triple()\n    self.target_machine = self.target.create_target_machine(\n        codemodel=\"small\"\n    )\n\n    self._add_builtins()\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIRVisitor.create_entry_block_alloca","title":"create_entry_block_alloca","text":"<pre><code>create_entry_block_alloca(var_name: str, type_name: str) -&gt; Any\n</code></pre> <p>Create an alloca instruction in the entry block of the function.</p> <p>This is used for mutable variables, etc.</p> <p>Parameters:</p> <ul> <li> <code>fn</code>         \u2013          </li> <li> <code>var_name</code>             (<code>str</code>)         \u2013          </li> <li> <code>type_name</code>             (<code>str</code>)         \u2013          </li> </ul> <p>Returns:</p> <ul> <li> <code>  An llvm allocation instance.</code>         \u2013          </li> </ul> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def create_entry_block_alloca(\n    self, var_name: str, type_name: str\n) -&gt; Any:  # llvm.AllocaInst\n    \"\"\"\n    Create an alloca instruction in the entry block of the function.\n\n    This is used for mutable variables, etc.\n\n    Parameters\n    ----------\n    fn: The llvm function\n    var_name: The variable name\n    type_name: The type name\n\n    Returns\n    -------\n      An llvm allocation instance.\n    \"\"\"\n    self._llvm.ir_builder.position_at_start(\n        self._llvm.ir_builder.function.entry_basic_block\n    )\n    alloca = self._llvm.ir_builder.alloca(\n        self._llvm.get_data_type(type_name), None, var_name\n    )\n    self._llvm.ir_builder.position_at_end(self._llvm.ir_builder.block)\n    return alloca\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIRVisitor.get_function","title":"get_function","text":"<pre><code>get_function(name: str) -&gt; Optional[Function]\n</code></pre> <p>Put the function defined by the given name to result stack.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def get_function(self, name: str) -&gt; Optional[ir.Function]:\n    \"\"\"\n    Put the function defined by the given name to result stack.\n\n    Parameters\n    ----------\n        name: Function name\n    \"\"\"\n    if name in self._llvm.module.globals:\n        return self._llvm.module.get_global(name)\n\n    if name in self.function_protos:\n        self.visit(self.function_protos[name])\n        return cast(ir.Function, self.result_stack.pop())\n\n    return None\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIRVisitor.initialize","title":"initialize","text":"<pre><code>initialize() -&gt; None\n</code></pre> <p>Initialize self.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def initialize(self) -&gt; None:\n    \"\"\"Initialize self.\"\"\"\n    # self._llvm.context = ir.context.Context()\n    self._llvm = VariablesLLVM()\n    self._llvm.module = ir.module.Module(\"Arx\")\n\n    # initialize the target registry etc.\n    llvm.initialize()\n    llvm.initialize_all_asmprinters()\n    llvm.initialize_all_targets()\n    llvm.initialize_native_target()\n    llvm.initialize_native_asmparser()\n    llvm.initialize_native_asmprinter()\n\n    # Create a new builder for the module.\n    self._llvm.ir_builder = ir.IRBuilder()\n\n    # Data Types\n    self._llvm.FLOAT_TYPE = ir.FloatType()\n    self._llvm.DOUBLE_TYPE = ir.DoubleType()\n    self._llvm.INT8_TYPE = ir.IntType(8)\n    self._llvm.INT32_TYPE = ir.IntType(32)\n    self._llvm.VOID_TYPE = ir.VoidType()\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIRVisitor.translate","title":"translate","text":"<pre><code>translate(expr: AST) -&gt; str\n</code></pre> <p>Translate an ASTx expression to string.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def translate(self, expr: astx.AST) -&gt; str:\n    \"\"\"Translate an ASTx expression to string.\"\"\"\n    self.visit(expr)\n    return str(self._llvm.module)\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.LLVMLiteIRVisitor.visit","title":"visit","text":"<pre><code>visit(expr: VariableDeclaration) -&gt; None\n</code></pre> <p>Translate ASTx Variable to LLVM-IR.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>@dispatch  # type: ignore[no-redef]\ndef visit(self, expr: astx.VariableDeclaration) -&gt; None:\n    \"\"\"Translate ASTx Variable to LLVM-IR.\"\"\"\n    if self.named_values.get(expr.name):\n        raise Exception(f\"Variable already declared: {expr.name}\")\n\n    # Emit the initializer\n    if expr.value is not None:\n        self.visit(expr.value)\n        init_val = self.result_stack.pop()\n        if init_val is None:\n            raise Exception(\"Initializer code generation failed.\")\n    else:\n        # If not specified, use 0 as the initializer.\n        # note: it should create something according to the defined type\n        init_val = ir.Constant(self._llvm.get_data_type(\"int32\"), 0)\n\n    # Create an alloca in the entry block.\n    # note: it should create the type according to the defined type\n    alloca = self.create_entry_block_alloca(expr.name, \"int32\")\n\n    # Store the initial value.\n    self._llvm.ir_builder.store(init_val, alloca)\n\n    # Remember this binding.\n    self.named_values[expr.name] = alloca\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.VariablesLLVM","title":"VariablesLLVM","text":"<p>Store all the LLVM variables that is used for the code generation.</p>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.VariablesLLVM.get_data_type","title":"get_data_type","text":"<pre><code>get_data_type(type_name: str) -&gt; Type\n</code></pre> <p>Get the LLVM data type for the given type name.</p> <p>Returns:</p> <ul> <li> <code>    ir.Type: The LLVM data type.</code>         \u2013          </li> </ul> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def get_data_type(self, type_name: str) -&gt; ir.types.Type:\n    \"\"\"\n    Get the LLVM data type for the given type name.\n\n    Parameters\n    ----------\n        type_name (str): The name of the type.\n\n    Returns\n    -------\n        ir.Type: The LLVM data type.\n    \"\"\"\n    if type_name == \"float\":\n        return self.FLOAT_TYPE\n    elif type_name == \"double\":\n        return self.DOUBLE_TYPE\n    elif type_name == \"int8\":\n        return self.INT8_TYPE\n    elif type_name == \"int32\":\n        return self.INT32_TYPE\n    elif type_name == \"char\":\n        return self.INT8_TYPE\n    elif type_name == \"void\":\n        return self.VOID_TYPE\n\n    raise Exception(\"[EE]: type_name not valid.\")\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.run_command","title":"run_command","text":"<pre><code>run_command(command: list[str]) -&gt; None\n</code></pre> <p>Run a command in the operating system.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def run_command(command: list[str]) -&gt; None:\n    \"\"\"Run a command in the operating system.\"\"\"\n    try:\n        subprocess.run(command, check=True)\n    except subprocess.CalledProcessError as e:\n        print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"api/builders/llvmliteir/#irx.builders.llvmliteir.safe_pop","title":"safe_pop","text":"<pre><code>safe_pop(lst: list[Value | Function]) -&gt; Value | Function\n</code></pre> <p>Implement a safe pop operation for lists.</p> Source code in <code>src/irx/builders/llvmliteir.py</code> <pre><code>def safe_pop(lst: list[ir.Value | ir.Function]) -&gt; ir.Value | ir.Function:\n    \"\"\"Implement a safe pop operation for lists.\"\"\"\n    try:\n        return lst.pop()\n    except IndexError:\n        return None\n</code></pre>"},{"location":"api/builders/symbol_table/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> symbol_table","text":""},{"location":"api/builders/symbol_table/#irx.builders.symbol_table","title":"symbol_table","text":"<p>Symbol Table classes.</p>"},{"location":"tutorials/get-started/","title":"IRx","text":"In\u00a0[1]: Copied! <pre>import astx\nfrom irx.builders.llvmliteir import LLVMLiteIR\n</pre> import astx from irx.builders.llvmliteir import LLVMLiteIR In\u00a0[2]: Copied! <pre>builder = LLVMLiteIR()\nmodule = builder.module()\n\ndecl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32, value=astx.LiteralInt32(1))\ndecl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32, value=astx.LiteralInt32(2))\ndecl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32, value=astx.LiteralInt32(4))\n\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\nlit_1 = astx.LiteralInt32(1)\n\nbasic_op = lit_1 + b - a * c / a + (b - a + c / a)\n\nmain_proto = astx.FunctionPrototype(\n    name=\"main\", args=astx.Arguments(), return_type=astx.Int32\n)\nmain_block = astx.Block()\nmain_block.append(decl_a)\nmain_block.append(decl_b)\nmain_block.append(decl_c)\nmain_block.append(astx.FunctionReturn(basic_op))\nmain_fn = astx.Function(prototype=main_proto, body=main_block)\n\nmodule.block.append(main_fn)\n</pre> builder = LLVMLiteIR() module = builder.module()  decl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32, value=astx.LiteralInt32(1)) decl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32, value=astx.LiteralInt32(2)) decl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32, value=astx.LiteralInt32(4))  a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  lit_1 = astx.LiteralInt32(1)  basic_op = lit_1 + b - a * c / a + (b - a + c / a)  main_proto = astx.FunctionPrototype(     name=\"main\", args=astx.Arguments(), return_type=astx.Int32 ) main_block = astx.Block() main_block.append(decl_a) main_block.append(decl_b) main_block.append(decl_c) main_block.append(astx.FunctionReturn(basic_op)) main_fn = astx.Function(prototype=main_proto, body=main_block)  module.block.append(main_fn) In\u00a0[3]: Copied! <pre>module\n</pre> module Out[3]: <pre></pre> In\u00a0[4]: Copied! <pre>print(builder.translate(module))\n</pre> print(builder.translate(module)) <pre>; ModuleID = \"Arx\"\ntarget triple = \"unknown-unknown-unknown\"\ntarget datalayout = \"\"\n\ndeclare i32 @\"putchar\"(i32 %\".1\")\n\ndefine i32 @\"putchard\"(i32 %\".1\")\n{\nentry:\n  %\".3\" = call i32 @\"putchar\"(i32 %\".1\")\n  ret i32 0\n}\n\ndefine i32 @\"main\"()\n{\nentry:\n  %\"c\" = alloca i32\n  %\"b\" = alloca i32\n  %\"a\" = alloca i32\n  store i32 1, i32* %\"a\"\n  store i32 2, i32* %\"b\"\n  store i32 4, i32* %\"c\"\n  %\"b.1\" = load i32, i32* %\"b\"\n  %\"addtmp\" = add i32 1, %\"b.1\"\n  %\"a.1\" = load i32, i32* %\"a\"\n  %\"c.1\" = load i32, i32* %\"c\"\n  %\"multmp\" = mul i32 %\"a.1\", %\"c.1\"\n  %\"a.2\" = load i32, i32* %\"a\"\n  %\"divtmp\" = sdiv i32 %\"multmp\", %\"a.2\"\n  %\"subtmp\" = sub i32 %\"addtmp\", %\"divtmp\"\n  %\"b.2\" = load i32, i32* %\"b\"\n  %\"a.3\" = load i32, i32* %\"a\"\n  %\"subtmp.1\" = sub i32 %\"b.2\", %\"a.3\"\n  %\"c.2\" = load i32, i32* %\"c\"\n  %\"a.4\" = load i32, i32* %\"a\"\n  %\"divtmp.1\" = sdiv i32 %\"c.2\", %\"a.4\"\n  %\"addtmp.1\" = add i32 %\"subtmp.1\", %\"divtmp.1\"\n  %\"addtmp.2\" = add i32 %\"subtmp\", %\"addtmp.1\"\n  ret i32 %\"addtmp.2\"\n}\n\n</pre>"},{"location":"tutorials/get-started/#irx","title":"IRx\u00b6","text":"<p>IRx aims to provide a translator to LLVM-IR from ASTx objects.</p>"},{"location":"tutorials/get-started/#getting-started","title":"Getting Started\u00b6","text":"<p>First, check our documentation about the installation.</p> <p>Now, let's import our library:</p>"}]}